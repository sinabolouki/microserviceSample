package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	cataloguepb "microservice-sample/catalogue-service/gen"
	"microservice-sample/gateway/graph/model"
	userpb "microservice-sample/user-service/gen"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	res, err := r.UserClient.CreateUser(ctx, &userpb.CreateUserRequest{
		Name:  input.Name,
		Email: input.Email,
	})
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}, nil
}

// CreateCatalogueItem is the resolver for the createCatalogueItem field.
func (r *mutationResolver) CreateCatalogueItem(ctx context.Context, input model.CreateCatalogueItemInput) (*model.CatalogueItem, error) {
	resp, err := r.CatalogueClient.CreateItem(ctx, &cataloguepb.CreateItemRequest{
		Title: input.Title,
		Uom:   input.Uom,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to create catalogue item: %w", err)
	}

	// Map gRPC response to GraphQL model
	return &model.CatalogueItem{
		ID:    resp.Id,
		Title: resp.Title,
		Uom:   resp.Uom,
	}, nil
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	res, err := r.UserClient.GetUser(ctx, &userpb.GetUserRequest{Id: id})
	if err != nil {
		return nil, fmt.Errorf("failed to get catalogue item: %w", err)
	}

	return &model.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	res, err := r.UserClient.ListUsers(ctx, &userpb.Empty{})
	if err != nil {
		return nil, err
	}

	var users []*model.User
	for _, user := range res.Users {
		users = append(users, &model.User{
			ID:    user.Id,
			Name:  user.Name,
			Email: user.Email,
		})
	}

	return users, nil
}

// CatalogueItem is the resolver for the catalogueItem field.
func (r *queryResolver) CatalogueItem(ctx context.Context, id string) (*model.CatalogueItem, error) {
	res, err := r.CatalogueClient.GetItem(ctx, &cataloguepb.GetItemRequest{Id: id})
	if err != nil {
		return nil, fmt.Errorf("failed to get catalogue item: %w", err)
	}

	return &model.CatalogueItem{
		ID:    res.Id,
		Title: res.Title,
		Uom:   res.Uom,
	}, nil
}

// CatalogueItems is the resolver for the catalogueItems field.
func (r *queryResolver) CatalogueItems(ctx context.Context) ([]*model.CatalogueItem, error) {
	res, err := r.CatalogueClient.ListItems(ctx, &cataloguepb.Empty{})
	if err != nil {
		return nil, fmt.Errorf("failed to list catalogue items: %w", err)
	}

	var items []*model.CatalogueItem
	for _, item := range res.Items {
		items = append(items, &model.CatalogueItem{
			ID:    item.Id,
			Title: item.Title,
			Uom:   item.Uom,
		})
	}

	return items, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
